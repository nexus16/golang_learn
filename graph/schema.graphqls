type Link {
  id: ID!
  title: String!
  address: String!
  user: User!
}

type User {
  id: ID!
  name: String!
}

type Member {
   id: ID!
   name: String!
   age: String!
   skill: [Skill]
}

type Skill {
   id: ID!
   name: String!
   desc: String!
}

type MemberSkill {
   id: ID!
   memberID: ID!
   skillID: ID!
}

type Query {
  links: [Link!]!
  users: [User!]!
  members: [Member]!
  skills: [Skill]!
}


input NewLink {
  title: String!
  address: String!
}

input RefreshTokenInput{
  token: String!
}

input NewUser {
  username: String!
  password: String!
}

input NewSkill {
  name: String!
  desc: String!
}

input NewMember {
  name: String!
  age: String!
  skillIDs: [ID!]
}

input NewMemberSkill {
  memberID: ID!
  skillID: ID!
}


input Login {
  username: String!
  password: String!
}

type Mutation {
  createLink(input: NewLink!): Link!
  createUser(input: NewUser!): String!
  createSkill(input: NewSkill!): Skill!
  createMemberSkill(input: NewMemberSkill!): MemberSkill!
  createMember(input: NewMember!): Member!
  login(input: Login!): String!
  # we'll talk about this in authentication section
  refreshToken(input: RefreshTokenInput!): String!
}